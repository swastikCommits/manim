// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  projects  Project[]
  jobs      Job[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("User")
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  jobs        Job[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
  @@index([createdAt])
  @@map("Project")
}

model Job {
  id          String    @id @default(cuid())
  prompt      String    
  status      JobStatus @default(QUEUED)
  videoUrl    String?   
  scriptPath  String?   
  error       String?   
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  parentJobId String?
  parentJob   Job?      @relation("JobParent", fields: [parentJobId], references: [id], onDelete: SetNull)
  children    Job[]     @relation("JobParent")

  messages    Message[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([parentJobId])
  @@map("Job")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())

  @@index([jobId])
  @@index([createdAt])
  @@map("Message")
}


enum JobStatus {
  QUEUED      
  PROCESSING  
  COMPLETED   
  FAILED      

  @@map("JobStatus")
}
